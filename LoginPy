from selenium import webdriver
import time
import unittest
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), "...", "..."))
from SampleProjects.POMProjectDemo.Pages.loginPage import LoginPage
from SampleProjects.POMProjectDemo.Pages.homePage import HomePage
import HtmlTestRunner
class LoginTest(unittest.TestCase):

    @classmethod
    #Creating a setup function
    
      def setUpClass(cls):
       
        cls.driver = webdriver.Chrome(executable_path="/home/smart/chromedriver/chromedriver")
        cls.driver.implicitly_wait(10)
        cls.driver.maximize_window()
        #Create a test function
        
    def test_01_login_valid(self):
        #variable self
        driver = self.driver
        driver.get("https://opensource-demo.orangehrmlive.com/")
        login = LoginPage(driver)
        login.enter_username("Admin")
        login.enter_password("admin123")
        login.click_login()
        homepage = HomePage(driver)
        homepage.click_welcome()
        homepage.click_logout()
        #self.driver.find_element_by_id("txtUsername").send_keys("")
        #self.driver.find_element_by_id("txtPassword").send_keys("")
        #self.driver.find_element_by_id("btnLogin").click()
        #self.driver.find_element_by_id("welcome").click()
        #self.driver.find_element_by_link_text("Logout").click()
        time.sleep(2)
    def test_02_login_invalid_username(self):
        driver = self.driver
        driver.get("https://opensource-demo.orangehrmlive.com/")
        #Creating an object for login page and passing the driver instance here.
        
       login = LoginPage(driver)
        #Using Login variable to access all the functions from the login page class
        login.enter_username("Admin1")
        login.enter_password("admin123")
        login.click_login()
        #Creating a screenshot
        driver.get_screenshot_as_file("filename1.png")
        message = driver.find_element_by_id("spanMessage").text
        self.assertEqual(message, "Invalid credentials")
    @classmethod
    
    #Function for tear down
    
    def tearDownClass(cls):
        cls.driver.close()
        cls.driver.quit()
        print("Test Completed")

if __name__== '__main__':
    unittest.main(testRunner=HtmlTestRunner.HTMLTestRunner(output=''))
